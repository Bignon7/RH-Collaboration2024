1) Les fichiers side de chaque dossier contiennent les sides bar personnalisés pour chaque acteur
2) La nav est identique partout alors on a décidé de l'isoler dans le fichier nav qui est à la racine de views pour pouvoir l'inclure facilement
    dans d'autres fichiers
3) Les fichiers border contiennent la nav et la side de chaque acteur, on pourra peut-être y ajouter un yield pour pouvoir faire des extends avec
4) Le fichier de base intégré est nommé base.blade.php à la racine de views, il n'est pas à modifier, il peut servir d'aide lors de la modification
    des autres fichiers, pour mieux se retrouver
5) Le dossier pages est le dossier dans lequel on aura toutes les vues du dashboard
6) Le fichier layout du dossier pages contient la nav et la side qui étaient là par défaut
6) Le fichier link du dossier pages contient juste les liens
7) Pour le email, on a créé un dossier Services contenant EmailServices, les modifications sont dans app.php


8) On a décidé de créer des request personnalisés pour quelques modèles afin de séparer la validation des données de l'enregistrement
9) Le dossier public du dossier storage a été lié au dossier public ce qui a entraîné la création d'un dossier storage dans public.
    C'est pour pouvoir afficher plus tard les photos uploadées par exemple.
    (The [C:\laragon\www\StaffNest\public\storage] link has been connected to [C:\laragon\www\StaffNest\storage\app/public]. )

10)On a créer des requests pour Demandeconge -- Formation -- Service (et pour Register aussi)
11) Avant de faire le php artisan migrate, il faut d'abord faire le php artisan migrate --path=database\migrations\2024_06_01_130335_create_formations_table.php
    pour créer la table formation var inscription hérite de ses clés


14) Le fichier links du dossier pages contient maintenant le style et les dépendances nécessaires pour le style des pages d'index (le bord et le contenu)
15) Les routes nécessaires pour le crud sur demandeconge, formation et service ont déjà été définis, peut-être on peut penser à les réduire

16)




17) Dans NotificationService, les fonctions sont définies avec static parce qu'on veut pouvoir les appeler en utilisant ClassName::methodName
18) Un exemple d'utilisation de mailable avec en paramètre un mailable qu'on a au préalable créé
 Mail::send(new RegisterCredentialsMail($request));


19) Pour la traduction: ///Langue encore __ français
**composer require laravel-lang/common --dev
php artisan lang:add fr
Puis on installe le français. Dans le fichier .env :

*APP_LOCALE=fr
Et on met à jour :

**php artisan lang:update

20)
